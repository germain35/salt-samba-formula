{%- import_yaml "samba/defaults.yaml" as defaults -%}
{%- set settings = salt['pillar.get']('samba', default=defaults.samba, merge=True) -%}
# Generated by Salt
# This is the main Samba configuration file. You should read the
# smb.conf(5) manual page in order to understand the options listed
# here. Samba has a huge number of configurable options (perhaps too
# many!) most of which are not shown in this example
#
# For a step to step guide on installing, configuring and using samba, 
# read the Samba-HOWTO-Collection. This may be obtained from:
#  http://www.samba.org/samba/docs/Samba-HOWTO-Collection.pdf
#
# Many working examples of smb.conf files can be found in the 
# Samba-Guide which is generated daily and can be downloaded from: 
#  http://www.samba.org/samba/docs/Samba-Guide.pdf
#
# Any line which starts with a ; (semi-colon) or a # (hash) 
# is a comment and is ignored. In this example we will use a #
# for commentry and a ; for parts of the config file that you
# may wish to enable
#
# NOTE: Whenever you modify this file you should run the command "testparm"
# to check that you have not made any basic syntactic errors. 
#
#======================= Global Settings =====================================
[global]

# workgroup = NT-Domain-Name or Workgroup-Name, eg: MIDEARTH
   workgroup = {{ settings.global.workgroup }}

# server string is the equivalent of the NT Description field
   server string = {{ settings.global.get('server string') }}

# Server role. Defines in which mode Samba will operate. Possible
# values are "standalone server", "member server", "classic primary
# domain controller", "classic backup domain controller", "active
# directory domain controller".
#
# Most people will want "standalone server" or "member server".
# Running as "active directory domain controller" will require first
# running "samba-tool domain provision" to wipe databases and create a
# new domain.
   server role = {{ settings.global.get('server role') }}

# This option is important for security. It allows you to restrict
# connections to machines which are on your local network. The
# following example restricts access to two C class networks and
# the "loopback" interface. For more examples of the syntax see
# the smb.conf man page
{%- if settings.global.get('hosts allow') %}
    hosts allow = {{ settings.global.get('hosts allow') }}
{%- else %}
;   hosts allow = 192.168.1. 192.168.2. 127.
{%- endif %}

# Uncomment this if you want a guest account, you must add this to /etc/passwd
# otherwise the user "nobody" is used
{%- if settings.global.get('guest account') %}
   guest account = {{ settings.global.get('guest account') }}
{%- else %}
;  guest account = pcguest
{%- endif %}

# this tells Samba to use a separate log file for each machine
# that connects
   log file = {{ settings.global.get('log file') }}

# Put a capping on the size of the log files (in Kb).
   max log size = {{ settings.global.get('max log size') }}

# Specifies the Kerberos or Active Directory realm the host is part of
{%- if settings.global.get('realm') %}
    realm = {{ settings.global.get('realm') }}
{%- else %}
;   realm = MY_REALM
{%- endif %}

# Backend to store user information in. New installations should 
# use either tdbsam or ldapsam. smbpasswd is available for backwards 
# compatibility. tdbsam requires no further configuration.
{%- if settings.global.get('passdb backend') %}
    passdb backend = {{ settings.global.get('passdb backend') }}
{%- else %}
;   passdb backend = tdbsam
{%- endif %}


# Using the following line enables you to customise your configuration
# on a per machine basis. The %m gets replaced with the netbios name
# of the machine that is connecting.
# Note: Consider carefully the location in the configuration file of
#       this line.  The included file is read at that point.
{%- if settings.global.get('include') %}
    include = {{ settings.global.get('include') }}
{%- else %}
;   include = /usr/local/samba/lib/smb.conf.%m
{%- endif %}

# Configure Samba to use multiple interfaces
# If you have multiple network interfaces then you must list them
# here. See the man page for details.
{%- if settings.global.get('interfaces') %}
    interfaces = {{ settings.global.get('interfaces') }}
{%- else %}
;   interfaces = 192.168.12.2/24 192.168.13.2/24 
{%- endif %}

# Where to store roving profiles (only for Win95 and WinNT)
#        %L substitutes for this servers netbios name, %U is username
#        You must uncomment the [Profiles] share below
{%- if settings.global.get('logon path') %}
    logon path = {{ settings.global.get('logon path') }}
{%- else %}
;   logon path = \\%L\Profiles\%U
{%- endif %}

# Windows Internet Name Serving Support Section:
# WINS Support - Tells the NMBD component of Samba to enable it's WINS Server
{%- if settings.global.get('wins support') %}
    wins support = {{ settings.global.get('wins support') }}
{%- else %}
;   wins support = yes
{%- endif %}

# WINS Server - Tells the NMBD components of Samba to be a WINS Client
#   Note: Samba can be either a WINS Server, or a WINS Client, but NOT both
{%- if settings.global.get('wins server') %}
    wins server = {{ settings.global.get('wins server') }}
{%- else %}
;   wins server = w.x.y.z
{%- endif %}

# WINS Proxy - Tells Samba to answer name resolution queries on
# behalf of a non WINS capable client, for this to work there must be
# at least one  WINS Server on the network. The default is NO.
{%- if settings.global.get('wins proxy') %}
    wins proxy = {{ settings.global.get('wins proxy') }}
{%- else %}
;   wins proxy = yes
{%- endif %}

# DNS Proxy - tells Samba whether or not to try to resolve NetBIOS names
# via DNS nslookups. The default is NO.
   dns proxy = {{ settings.global.get('dns proxy') }}

# These scripts are used on a domain controller or stand-alone 
# machine to add or delete corresponding unix accounts
;  add user script = /usr/sbin/useradd %u
;  add group script = /usr/sbin/groupadd %g
;  add machine script = /usr/sbin/adduser -n -g machines -c Machine -d /dev/null -s /bin/false %u
;  delete user script = /usr/sbin/userdel %u
;  delete user from group script = /usr/sbin/deluser %u %g
;  delete group script = /usr/sbin/groupdel %g

# Custom parameters
{%- for key, value in settings.global.items() %}
  {%- if key not in defaults.samba.global.keys() %}
   {{ key }} = {{ value }}
  {%- endif %}
{%- endfor %}

#============================ Share Definitions ==============================
{%- if settings.shares.homes.enabled %}
[homes]
  {%- for key, value in settings.shares.homes.items() %}
    {%- if key != 'enabled' %}
   {{ key }} = {{ value }}
    {%- endif %}
  {%- endfor %}
{%- endif %}

# Un-comment the following and create the netlogon directory for Domain Logons
; [netlogon]
;   comment = Network Logon Service
;   path = /usr/local/samba/lib/netlogon
;   guest ok = yes
;   writable = no
;   share modes = no


# Un-comment the following to provide a specific roving profile share
# the default is to use the user's home directory
;[Profiles]
;    path = /usr/local/samba/profiles
;    browseable = no
;    guest ok = yes


# NOTE: If you have a BSD-style print system there is no need to 
# specifically define each individual printer
{%- if settings.shares.printers.enabled %}
[printers]
  {%- for key, value in settings.shares.printers.items() %}
    {%- if key != 'enabled' %}
   {{ key }} = {{ value }}
    {%- endif %}
  {%- endfor %}
{%- endif %}

# This one is useful for people to share files
;[tmp]
;   comment = Temporary file space
;   path = /tmp
;   read only = no
;   public = yes

# A publicly accessible directory, but read only, except for people in
# the "staff" group
;[public]
;   comment = Public Stuff
;   path = /home/samba
;   public = yes
;   writable = no
;   printable = no
;   write list = @staff

# Other examples. 
#
# A private printer, usable only by fred. Spool data will be placed in fred's
# home directory. Note that fred must have write access to the spool directory,
# wherever it is.
;[fredsprn]
;   comment = Fred's Printer
;   valid users = fred
;   path = /homes/fred
;   printer = freds_printer
;   public = no
;   writable = no
;   printable = yes

# A private directory, usable only by fred. Note that fred requires write
# access to the directory.
;[fredsdir]
;   comment = Fred's Service
;   path = /usr/somewhere/private
;   valid users = fred
;   public = no
;   writable = yes
;   printable = no

# a service which has a different directory for each machine that connects
# this allows you to tailor configurations to incoming machines. You could
# also use the %U option to tailor it by user name.
# The %m gets replaced with the machine name that is connecting.
;[pchome]
;  comment = PC Directories
;  path = /usr/pc/%m
;  public = no
;  writable = yes

# A publicly accessible directory, read/write to all users. Note that all files
# created in the directory by users will be owned by the default user, so
# any user with access can delete any other user's files. Obviously this
# directory must be writable by the default user. Another user could of course
# be specified, in which case all files would be owned by that user instead.
;[public]
;   path = /usr/somewhere/else/public
;   public = yes
;   only guest = yes
;   writable = yes
;   printable = no

# The following two entries demonstrate how to share a directory so that two
# users can place files there that will be owned by the specific users. In this
# setup, the directory should be writable by both users and should have the
# sticky bit set on it to prevent abuse. Obviously this could be extended to
# as many users as required.
;[myshare]
;   comment = Mary's and Fred's stuff
;   path = /usr/somewhere/shared
;   valid users = mary fred
;   public = no
;   writable = yes
;   printable = no
;   create mask = 0765

{%- for share, params in settings.shares.items() %}
  {%- if share not in ['homes', 'printers'] %}
[{{ share }}]
    {%- for key, value in params.items() %}
      {%- if key != 'enabled' %}
   {{ key }} = {{ value }}
      {%- endif %}
    {%- endfor %}
  {%- endif %}
{% endfor %}